https://leetcode.com/problems/add-two-numbers/

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Solution:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode result=new ListNode(-1);
        ListNode temp=result;
        int carry=0;
        while(l1!=null && l2!=null)
        {
            int val=l1.val+l2.val+carry;
            temp.next=new ListNode(val%10);
            carry=val/10;
            temp=temp.next;
            l1=l1.next;
            l2=l2.next;
        }
        while(l1!=null)
        {
            int val=l1.val+carry;
            temp.next=new ListNode(val%10);
            carry=val/10;
            temp=temp.next;
            l1=l1.next;
        }
        while(l2!=null)
        {
            int val=l2.val+carry;
            temp.next=new ListNode(val%10);
            carry=val/10;
            temp=temp.next;
            l2=l2.next;
        }
        if(carry!=0)
        {
            temp.next=new ListNode(carry);
        }
        return result.next;
        
    }
}

